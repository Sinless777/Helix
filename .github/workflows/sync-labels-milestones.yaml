name: Sync Labels & Milestones

on:
  schedule:
    - cron: '0 0 * * *' # nightly at midnight UTC
  push:
    paths:
      - '.github/labels.yaml'
      - '.github/milestones.yaml'
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
  workflow_dispatch:

concurrency:
  group: sync-labels-milestones-${{ github.ref }}

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  # ┌─────────────────────────────┐
  # │ 0) Setup Job Dependencies   │
  # └─────────────────────────────┘
  setup:
    runs-on: ubuntu-latest
    outputs:
      sync-labels: ${{ needs.sync-labels.outputs.result }}
      label-pr-issues: ${{ needs.label-pr-issues.outputs.result }}
      sync-milestones: ${{ needs.sync-milestones.outputs.result }}
      assign-milestone: ${{ needs.assign-milestone.outputs.result }}
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'pull_request_target' || github.event_name == 'issues' }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Setup Node.js & pnpm cache
        uses: actions/setup-node@v5
        with:
          node-version: '22'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Set outputs
        id: set-outputs
        run: |
          echo "sync-labels=true" >> $GITHUB_OUTPUT
          echo "label-pr-issues=true" >> $GITHUB_OUTPUT
          echo "sync-milestones=true" >> $GITHUB_OUTPUT
          echo "assign-milestone=true" >> $GITHUB_OUTPUT

      - name: Notify on failure
        if: failure()
        run: echo "🚨 Setup job failed—check workflow logs."

  # ┌───────────────────────────┐
  # │ 1) Sync GitHub Labels     │
  # └───────────────────────────┘
  sync-labels:
    needs: setup
    outputs:
      result: ${{ steps.set-outputs.outputs.sync-labels }}
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'pull_request_target' }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Setup Node.js & pnpm cache
        uses: actions/setup-node@v5
        with:
          node-version: '22'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Sync GitHub labels
        uses: EndBug/label-sync@v2
        with:
          config-file: .github/labels.yaml
          delete-other-labels: true

      - name: Notify on failure
        if: failure()
        run: echo "🚨 Label sync failed—check workflow logs."

  # ┌───────────────────────────────┐
  # │ 2) Label Updated PRs          │
  # └───────────────────────────────┘
  label-pr-issues:
    needs: sync-labels
    outputs:
      result: ${{ steps.set-outputs.outputs.label-pr-issues }}
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || github.event_name == 'pull_request_target' || github.event_name == 'issues' }}
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Apply labels via Labeler
        uses: actions/labeler@v6
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: .github/labeler.yaml
          sync-labels: false
          dot: true

  # ┌───────────────────────────────┐
  # │ 3) Sync GitHub Milestones     │
  # └───────────────────────────────┘
  sync-milestones:
    needs: setup
    outputs:
      result: ${{ steps.set-outputs.outputs.sync-milestones }}
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'pull_request_target' }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Python & pip cache
        uses: actions/setup-python@v6
        with:
          python-version: '3.x'
          cache-dependency-path: .github/milestones.yaml

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub pyyaml

      - name: Sync milestones
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          python3 << 'EOF'
          import os, yaml
          from datetime import datetime
          from github import Github

          gh   = Github(os.getenv('GITHUB_TOKEN'))
          repo = gh.get_repo(os.getenv('REPO'))

          with open('.github/milestones.yaml') as f:
              data = yaml.safe_load(f)

          existing = {m.title: m for m in repo.get_milestones(state='all')}

          for m in data.get('milestones', []):
              params = {
                'title':       m['title'],
                'state':       m.get('state', 'open'),
                'description': m.get('description', ''),
              }
              if due := m.get('due_on'):
                  dt = datetime.fromisoformat(due.replace('Z', '+00:00'))
                  params['due_on'] = dt.date()

              if m['title'] in existing:
                  ms = existing[m['title']].edit(**{k:v for k,v in params.items() if v is not None}) or existing[m['title']]
              else:
                  ms = repo.create_milestone(**{k:v for k,v in params.items() if v is not None})

              m['id'] = ms.id

          with open('.github/milestones.yaml','w') as f:
              yaml.safe_dump(data, f, sort_keys=False)
          EOF

      - name: Commit updated milestones.yaml
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: 'chore: update milestone IDs'
          file_pattern: '.github/milestones.yaml'

  # ┌───────────────────────────────┐
  # │ 4) Auto-assign Milestones     │
  # └───────────────────────────────┘
  assign-milestone:
    needs: sync-milestones
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'issues' }}
    permissions:
      issues: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Setup Python & cache pip
        uses: actions/setup-python@v6
        with:
          python-version: '3.x'
          cache-dependency-path: .github/milestones.yaml

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub PyYAML

      - name: Auto-assign to nearest milestone
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number || github.event.pull_request.number }}
          REPO: ${{ github.repository }}
        run: |
          python3 << 'EOF'
          import os, yaml
          from datetime import datetime, timezone
          from github import Github

          gh   = Github(os.getenv('GITHUB_TOKEN'))
          repo = gh.get_repo(os.getenv('REPO'))
          num  = os.getenv('ISSUE_NUMBER')
          if not num:
              exit(0)

          cfg  = yaml.safe_load(open('.github/milestones.yaml'))
          now  = datetime.now(timezone.utc).timestamp()

          candidates = [
              (abs(datetime.fromisoformat(m.get('due_on').replace('Z', '+00:00')).replace(tzinfo=timezone.utc).timestamp() - now), m['id'])
              for m in cfg.get('milestones', []) if m.get('due_on')
          ]
          if not candidates:
              exit(0)
          _, nearest = min(candidates, key=lambda x: x[0])

          # Fetch issue or PR
          issue = repo.get_issue(int(num)) if os.getenv('GITHUB_EVENT_NAME') == 'issues' else repo.get_pull(int(num))

          # Skip if already assigned
          if issue.milestone and issue.milestone.id == nearest:
              exit(0)

          # Map existing milestones and assign
          milestone_map = {m.id: m for m in repo.get_milestones(state='all')}
          m_obj = milestone_map.get(nearest)
          if m_obj:
              issue.edit(milestone=m_obj)
          EOF
  # ┌───────────────────────────────┐
  # │ 5) Finalize Workflow          │
  # └───────────────────────────────┘
  Finalize:
    runs-on: ubuntu-latest
    needs: [label-pr-issues, assign-milestone]
    if: ${{ always() }}
    steps:
      - name: Finalize workflow
        run: echo "✅ Workflow completed successfully!"

      - name: outputs
        run: |
          echo "sync-labels=${{ needs.setup.outputs.sync-labels }}"
          echo "label-pr-issues=${{ needs.setup.outputs.label-pr-issues }}"
          echo "sync-milestones=${{ needs.setup.outputs.sync-milestones }}"
          echo "assign-milestone=${{ needs.setup.outputs.assign-milestone }}"
        id: set-outputs

      - name: Notify on failure
        if: failure()
        run: echo "🚨 Workflow failed—check logs for details."
